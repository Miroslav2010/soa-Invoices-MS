swagger: '2.0'
info:
  title: Invoice API
  version: "0.1"
  description: Invoices microservice API
consumes:
  - application/json
produces:
  - application/json
basePath: "/api"
paths:
#  /test1/{test1_id}:
#    get:
#      tags: [ Test1 ]
#      operationId: app.get_test1
#      summary: Testing endpoint
#      parameters:
#        - $ref: '#/parameters/test1_id'
#      responses:
#        200:
#          description: Return test1
#        404:
#          description: Does not exist
  /invoice/create:
    post:
      tags: [ Invoices ]
      operationId: app.create_invoice
      summary: Create new invoice
      parameters:
        - $ref: '#/parameters/invoice_body'
      responses:
        200:
          description: Created OK
        400:
          description: Try again
  /invoice/find_invoice_by_id/{invoice_id}:
    get:
      tags: [ Invoices ]
      operationId: app.get_invoice_by_id
      summary: Get invoice by id
      parameters:
        - $ref: '#/parameters/invoice_id'
      responses:
        200:
          description: return Invoice by Id
        404:
          description: Invoice not found
  /invoice/find_invoices_by_user/{user_id}:
    get:
      tags: [ Invoices ]
      operationId: app.get_invoices_by_user
      summary: Get invoice by user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: return Invoice by User
        404:
          description: Invoice not found
  /invoice/find_all:
    get:
      tags: [ Invoices ]
      operationId: app.get_all
      summary: Get all invoices
      responses:
        200:
          description: return all Invoices
        404:
          description: Invoices not found
#  /person/:
#    post:
#      tags: [ Person ]
#      operationId: app.person_add
#      parameters:
#        - $ref: '#/parameters/person_body'
#      responses:
#        200:
#          description: Return status
#        409:
#          description: Already exists
#  /person/{person_name}:
#    get:
#      tags: [ Person ]
#      operationId: app.person_find
#      parameters:
#        - $ref: '#/parameters/person_name'
#      responses:
#        200:
#          description: Return person object
#        404:
#          description: Person not found

parameters:
#  test1_id:
#    name: test1_id
#    description: Test1 unique id
#    in: path
#    type: string
#    required: true
#    pattern: "^[a-zA-Z0-9-]+$"

  user_id:
    name: user_id
    description: The ID of the User
    in: path
    type: string
    required: true

  invoice_id:
    name: invoice_id
    description: The ID of the Invoice
    in: path
    type: string
    required: true

  invoice_body:
    name: invoice_body
    description: Required parameters for invoice
    in: body
    schema:
      required:
        - user_id
        - transaction_id
        - item_list
      properties:
        user_id:
          type: integer
        transaction_id:
          type: integer
        item_list:
          type: array

#  person_body:
#    name: person_body
#    description: Test1 unique id
#    in: body
#    schema:
#      required:
#        - name
#      properties:
#        name:
#          type: string
#        surname:
#          type: string
#
#  person_name:
#    name: person_name
#    description: The name of the person we're looking for
#    in: path
#    required: true
#    type: string
